defaults: &defaults
  working_directory: ~/build

version: 2
jobs:
  build:
    <<: *defaults
    docker:
      - image: node:12.18.3
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
        environment:
          TEST_REPORT_PATH: reports/npm-test.txt
      - image: mongo:4.0

    steps:
      - checkout

      - setup_remote_docker:
          version: 18.05.0-ce

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Installing NPM Modules
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Executing Tests
          command: |
            mkdir reports
            npm test | tee ${TEST_REPORT_PATH}
            cp -r coverage/ reports/

      - run:
          name: Building and Publishing Image
          command: |
            TAG=$(node -p -e "require('./package.json').version")
            GIT_TAG=$(git tag -l $TAG);

            IMAGE=$( if [ $DOCKER_IMAGE ]; then echo $DOCKER_IMAGE; else echo "lucasbrandaobh/$CIRCLE_PROJECT_REPONAME"; fi;);

            if [ "$TAG" == "$GIT_TAG" ]; then
              echo "The version $TAG already exists!"
            elif [[ ("$CIRCLE_BRANCH" == "master" && "$TAG" != *"rc"* && "$TAG" != *"hotfix"*) || ("$CIRCLE_BRANCH" != "master" && ($TAG == *"rc"* || "$TAG" == *"hotfix"*)) ]]; then
              git tag $TAG
              docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

              echo "building image $IMAGE:$TAG" | tee $BUILD_REPORT_PATH
              docker build -t $IMAGE:$TAG . | tee $BUILD_REPORT_PATH

              echo "pushing image $IMAGE:$TAG" | tee $BUILD_REPORT_PATH
              docker push $IMAGE:$TAG | tee -a $BUILD_REPORT_PATH

              echo "Image $IMAGE:$TAG published on docker hub!"
              
              git push origin $TAG | tee -a $BUILD_REPORT_PATH
              echo "$IMAGE:$TAG created on github!"
            else
              echo "The version $TAG is unformated!"
              echo "Use MAJOR.MINOR.PATCH in master,  MAJOR.MINOR.PATCH-rc-n or MAJOR.MINOR.PATCH-hotfix-n in other branchs"
            fi  

      - store_artifacts:
          path: reports

workflows:
  version: 2
  automated-deploy-process:
    jobs:
      - build:
          context: brandao